#buchain secp256k1 module CmakeLists.txt -- libbuchain_secp256k1.a

set(LIB_BUCHAIN_SECP256K1 buchain_secp256k1)

#automaticall get src file in specifical dir

if(BUCHAIN_SRC_DIR MATCHES "")
	set(BUCHAIN_SRC_DIR ../)
endif()
if(COMMON_COMPILE_FLAGS MATCHES "")
	set(COMMON_COMPILE_FLAGS ENABLE_MODULE_RECOVERY ENABLE_MODULE_ECDH ENABLE_MODULE_RANGEPROOF ENABLE_MODULE_BULLETPROOF ENABLE_MODULE_GENERATOR USE_FIELD_INV_BUILTIN USE_NUM_NONE USE_SCALAR_INV_BUILTIN)
	set(COMPILE_FLAGS USE_FIELD_10X26 USE_SCALAR_8X32 HAVE_BUILTIN_EXPECT)
endif()

set(SECP256K1_BULLETPROOF_SRC ${BUCHAIN_SRC_DIR}/secp256k1-bulletproof/src/secp256k1.c)

aux_source_directory(${BUCHAIN_SRC_DIR}/secp256k1-bulletproof/jni SECP256K1_BULLETPROOF_JNI)
aux_source_directory(${BUCHAIN_SRC_DIR}/secp256k1-bulletproof/privacy SECP256K1_BULLETPROOF_PRIVACY)
aux_source_directory(${BUCHAIN_SRC_DIR}/secp256k1-bulletproof/contrib SECP256K1_BULLETPROOF_CONTRIB)

#generate static library file
add_library(${LIB_BUCHAIN_SECP256K1} ${SECP256K1_BULLETPROOF_SRC} ${SECP256K1_BULLETPROOF_JNI} ${SECP256K1_BULLETPROOF_PRIVACY} ${SECP256K1_BULLETPROOF_CONTRIB}) 

#specify compile options for target obj
target_compile_definitions(${LIB_BUCHAIN_SECP256K1} PRIVATE ${COMMON_COMPILE_FLAGS} ${COMPILE_FLAGS})
target_include_directories(${LIB_BUCHAIN_SECP256K1} PRIVATE ${CMAKE_CURRENT_SOURCE_DIR} ${CMAKE_CURRENT_SOURCE_DIR}/include ${CMAKE_CURRENT_SOURCE_DIR}/src)
target_compile_options(${LIB_BUCHAIN_SECP256K1}
#    PUBLIC -std=c++11 
    PUBLIC -DASIO_STANDALONE
    PUBLIC -D_WEBSOCKETPP_CPP11_STL_
)

# for macOS
if(CMAKE_COMPILER_IS_GNUCXX)
    set(CMAKE_CXX_FLAGS "-std=c++11 ${CMAKE_CXX_FLAGS}")
endif(CMAKE_COMPILER_IS_GNUCXX)